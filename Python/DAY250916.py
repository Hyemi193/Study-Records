# ---------------------------------------------------------------
# 10.2 튜플 사용하기
# ---------------------------------------------------------------
a = (38, 21, 53, 62, 19)
b = 38, 21, 53, 62, 19
person = ('james', 17, 175.3, True)

print(a, b, person)

# 10.2.1 요소가 한 개 들어있는 튜플 만들기
a = (38,)
b = 38,
print(a, b)

# 10.2.2 range를 사용하여 튜플 만들기
a = tuple(range(10))
b = tuple(range(5, 12))     # 5 ~ 11 까지 들어있는 튜플
c = tuple(range(-4, 10, 2))
print(a, b, c)

# 10.2.3 튜플을 리스트로 만들고 리스트를 튜플로 만들기
a = [1, 2, 3]
print(tuple(a))

b = (4, 5, 6)
print(list(b))

# 참고) list와 tuple 안의 문자열
print(list('Hello'))       # 문자 하나 하나가 리스트의 요소로 들어가서 리스트 ['H', 'e', 'l', 'l', 'o']가 만들어짐
print(tuple('Hello'))      # 튜플도 마찬가지

# 참고) 리스트와 튜플로 변수 만들기
a, b, c = [1, 2, 3]
d, e, f = (4, 5, 6)
print(a, b, c, d, e, f)

x = [1, 2, 3]
a, b, c = x
print(a, b, c)

y = (4, 5, 6)
d, e, f = y
print(d, e, f)

# z = input().split()
# b, c = z
# print(b, c)

a = [1, 2, 3]       # 리스트 패킹
b = (1, 2, 3)       # 튜플 패킹
c = 1, 2, 3         # 튜플 패킹

# 심사문제 : range의 시작하는 숫자는 -10, 끝나는 숫자는 10이며 입력된 정수만큼 증가하는 숫자가 들어가도록 튜플 생성하기
# n = int(input())
# x = tuple(range(-10, 11, n))
# print(x)

# ---------------------------------------------------------------
# Unit 11. 시퀀스 자료형 활용하기
# ---------------------------------------------------------------
# 11.1 시퀀스 자료형의 공통 기능 사용하기
# ---------------------------------------------------------------
# 11.1.1 특정 값이 있는지 확인하기
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
print(30 in a)
print(100 in a)
print(100 not in a)
print(30 not in a)

print(43 in  (38, 76, 43, 62, 19))
print(1 in range(10))
print('P' in 'Hello, Python')

# 11.1.2 시퀀스 객체 연결하기
## list
a = [0, 10, 20, 30]
b = [9, 8, 7, 6]
print(a + b)

## range(X)
# print(range(0, 10) + range(10, 20))
print(list(range(0, 10)) + list(range(10, 20)))
print(tuple(range(0, 10)) + tuple(range(10, 20)))

## 문자열
print('Hello, ' + 'world!')

# 참고) 문자열에 숫자 연결하기
# print('Hello, ' + 10)
print('Hello, ' + str(10))

# 11.1.3 시퀀스 객체 반복하기
## list
print([0, 10, 20, 30] * 3)

## range
# print(range(0, 5, 2) * 3)
print(list(range(0, 5, 2)) * 3) 
print(tuple(range(0, 5, 2)) * 3) 

## 문자열
print('Hello, ' * 3)

# ---------------------------------------------------------------
# 11.2 시퀀스 객체의 요소 개수 구하기
# ---------------------------------------------------------------
# 11.2.1 리스트와 튜플의 요소 개수 구하기
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
print(len(a))

b = (38, 76, 43, 62, 19)
print(len(b))

# 11.2.2 range의 숫자 생성 개수 구하기
print(len(range(0, 10, 2)))

# 11.2.3 문자열의 길이 구하기
hello = 'Hello, world!'
print(len(hello))

hello2 = '안녕하세요'
print(len(hello2))

# ---------------------------------------------------------------
# 11.3 인덱스 사용하기
# ---------------------------------------------------------------
a = [38, 21, 53, 62, 19]
print(a[0], a[2], a[4])     # list의 첫 번째, 세 번째, 다섯 번째 요소 출력

b = (38, 21, 53, 62, 19)
print(b[0])

r = range(0, 10, 2)
print(r[2])

hello = 'Hello, world!'
print(hello[7])

# 참고) __getitem__ 메서드
a = [38, 21, 53, 62, 19]
print(a.__getitem__(1))

# 11.3.1 음수 인덱스 지정하기
c = [38, 21, 53, 62, 19]
print(c[-1], c[-5])

d = (38, 21, 53, 62, 19)
print(b[-1])

r = range(0, 10, 2)
print(r[-3])

hello = 'Hello, world!'
print(hello[-4])

# 11.3.2 인덱스의 범위를 벗어나면?
# print(c[5])       # IndexError 발생

# 11.3.3 마지막 요소에 접근하기
print(c[len(c) - 1])

# 11.3.4 요소에 값 할당하기
## list
a = [0, 0, 0, 0, 0]
a[0] = 38; a[1] = 21; a[2] = 53; a[3] = 62; a[4] = 19
print(a)
print(a[0], a[3])

## tuple
b = (0, 0, 0, 0, 0)
# b[0] = 38     # 튜플은 값 할당 불가능

## range
r = range(0, 10, 2)
# r[0] = 3      # range도 저장된 요소 변경 불가능

## 문자열
hello = 'Hello, world!'
# hello[0] = 'A'    # 문자열도 요소 변경 불가능

## 즉, 시퀀스 자료형 중에서 tuple, range, 문자열은 읽기 전용!

# 11.3.5 del로 요소 삭제하기
## list
a = [1, 2, 3, 4, 5]
del a[2]
print(a)

## tuple
b = (6, 7, 8, 9, 10)
# del b[1]      # tuple은 삭제 불가능
print(b)

## range
r = range(0, 10, 2)
# del r[0]      # range도 삭제 불가능
print(r)

## 문자열
hello = 'Hello, world!'
# del hello[0]  # 문자열도 삭제 불가능

# ---------------------------------------------------------------
# 11.4 슬라이스 사용하기
# ---------------------------------------------------------------
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
print(a[0:4])

# 11.4.1 리스트의 중간 부분 가져오기
print(a[4:7])
print(a[4:-1])

# 11.4.2 인덱스 증가폭 사용하기
print(a[2:8:3])

# 11.4.3 인덱스 생략하기
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
print(a[:7])
print(a[7:])
print(a[:])

# 11.4.4 인덱스를 생략하면서 증가폭 사용하기
print(a[:7:2])
print(a[7::2])
print(a[::2])
print(a[::])        # 리스트 전체를 가져옴

# 참고) 슬라이스의 인데스 증가폭을 음수로 지정하면?
print(a[5:1:-1])

# 11.4.5 len 응용
print(a[0:len(a)])
print(a[:len(a)])

# 11.4.6 튜플, range, 문자열에 슬라이스 사용하기
## 튜플
b = (0, 10, 20, 30, 40, 50, 60, 70, 80, 90)
print(b[4:7])
print(b[4:])
print(b[:7:2])

## range
r = range(10)
print(r[4:7])
print(r[4:])
print(r[:7:2])
print(list(r[:7:2]))

## 문자열
hello = 'Hello, world!'
print(hello[2:9])
print(hello[2:])
print(hello[:9:2])

# 참고) slice 객체 사용하기
print(range(10)[slice(4, 7, 2)])
print(range(10).__getitem__(slice(4, 7, 2)))

## list
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
s = slice(4, 7)
print(a[s])

## range
r = range(10)
print(r[s])

## 문자열
hello = 'Hello, world!'
print(hello[s])

# 11.4.7 슬라이스에 요소 할당하기
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
a[2:5] = ['a', 'b', 'c']
print(a)

b = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
b[2:5] = ['a']
print(b)        # 할당할 요소 개수가 적으면 그만큼 리스트의 요소 개수도 줄어듦

c = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
c[2:5] = ['a', 'b', 'c', 'd', 'e']
print(c)        # 할당할 요소 개수가 많으면 그만큼 리스트의 요소 개수도 늘어남

d = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
d[2:8:2] = ['a', 'b', 'c']
print(d)

e = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
# e[2:8:2] = ['a', 'b']     # 단, 인덱스 증가폭을 지정했을 때는 슬라이스 범위의 요소 개수와 할당할 요소 개수가 정확히 일치해야 함

## tuple, range, 문자열은 슬라이스 범위를 지정하더라도 요소 할당 X

# 11.4.8 del로 슬라이스 삭제하기
a = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
del a[2:5]
print(a)

b = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
del b[2:8:2]
print(b)

## tuple, range, 문자열은 del로 슬라이스 삭제 X

# 심사문제 1 : 리스트 x의 마지막 요소 5개를 삭제한 뒤 튜플로 출력
x = input().split()
del x[-1:-6:-1]
print(x)

# 심사문제 2 : 문자열에서 인덱스가 홀수인 문자와 짝수인 문자 연결하기
x = input()
y = x[1::2]
z = x[::2]
print(y + z)