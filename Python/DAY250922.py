# ------------------------------------------------------------------------------------------------------
# Unit 23. 2차원 리스트 사용
# ------------------------------------------------------------------------------------------------------
# 23.1 2차원 리스트 만들고 요소에 접근하기
# ------------------------------------------------------------------------------------------------------
a = [[10, 20], [30, 40], [50, 60]]
print(a)

b = [[10, 20],
     [30, 40],
     [50, 60]]
print(b)

# 23.1.1 2차원 리스트의 요소에 접근하기
print(a[0][0])
print(a[1][1])
print(a[2][1])
a[0][1] = 1000
print(a[0][1])

# 참고) 톱니형 리스트
a = [[10, 20], 
     [500, 600, 700],
     [9],
     [30, 40],
     [8],
     [800, 900, 1000]]
print(a)

b = []
b.append([])
b[0].append(10)
b[0].append(20)

b.append([])
b[1].append(500)
b[1].append(600)
b[1].append(700)

print(b)

# 참고) 2차원 튜플
a = ((10, 20), (30, 40), (50, 60))
b = ([10, 20], [30, 40], [50, 60])
c = [(10, 20), (30, 40), (50, 60)]

# a[0][0] = 500         # 안쪽 튜플 변경 불가능
# a[0] = (500, 600)     # 바깥쪽 튜플 변경 불가능
b[0][0] = 500           # 안쪽 리스트 변경 가능
# b[0] = (500, 600)     # 바깥쪽 튜플 변경 불가능
# c[0][0] = 500           # 안쪽 튜플 변경 가능
c[0] = (500, 600)       # 바깥쪽 리스트 변경 가능

# 참고) 사람이 알아보기 쉽게 출력하기
a = [[10, 20], [30, 40], [50, 60]]
from pprint import pprint
pprint(a, indent = 4, width = 20)

# ------------------------------------------------------------------------------------------------------
# 23.2 반복문으로 2차원 리스트의 요소를 모두 출력
# ------------------------------------------------------------------------------------------------------
# 23.2.1 for 반복문 한 번만 사용
for x, y in a:
    print(x, y)

# 23.2.2 for 반복문 두 번 사용
for i in a:
    for j in i:
        print(j, end = ' ')
    print()

# 23.2.3 for와 range 사용
for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j], end = ' ')
    print()

print('-----')

# 23.2.4 while 반복문 한 번 사용
i = 0

while i < len(a):
    x, y = a[i]
    print(x, y)
    i += 1

# 23.2.5 while 반복문 두 번 사용
i = 0

while i < len(a):
    j = 0
    while j < len(a[i]):
        print(a[i][j])
        j += 1
    print()
    i += 1

# ------------------------------------------------------------------------------------------------------
# 23.3 반복문으로 리스트 만들기
# ------------------------------------------------------------------------------------------------------
# 23.3.1 for 반복문으로 1차원 리스트 만들기
x = []

for i in range(10):
    a.append(0)
print(a)

# 23.3.2 for 반복문으로 2차원 리스트 만들기
y = []
for i in range(3):
    line = []
    for j in range(2):
        line.append(0)
    y.append(line)
print(y)

print('----------------------')

# 23.3.3 리스트 표현식으로 2차원 리스트 만들기
z = [[0 for j in range(2)] for i in range(3)]
print(z)

q = [[0]*2 for i in range(3)]
print(q)

# 23.3.4 톱니형 리스트 만들기
a = [3, 1, 3, 2, 5]
b = []

for i in a:
    line = []
    for j in range(i):
        line.append(0)
    b.append(line)
print(b)

a = [[0]*i for i in [3, 1, 3, 2, 5]]
print(a)

# 참고) sorted로 2차원 리스트 정렬하기
students = [['john', 'C', 19],
            ['maria', 'A', 25],
            ['andrew', 'B', 7]
            ]
print(sorted(students, key = lambda student : student[1]))
print(sorted(students, key = lambda student : student[2]))

# ------------------------------------------------------------------------------------------------------
# 23.4 2차원 리스트의 할당과 복사 알아보기
# ------------------------------------------------------------------------------------------------------
a = [[10, 20], [30, 40]]
b = a
b[0][0] = 500
print(a, b)

c = [[10, 20], [30, 40]]
d = c.copy()                # 1차원과 달리 c와 d에 둘 다 반영됨
d[0][0] = 500
print(c, d)

## 2차원 이상의 다차원 리스트는 리스트를 완전히 복사하려면 copy 메서드 대신 copy 모듈의 deepcopy 함수 사용
a = [[10,20], [30, 40]]

import copy
b = copy.deepcopy(a)
b[0][0] = 700
print(a, b)