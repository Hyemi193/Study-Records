# ------------------------------------------------------------------------------------------------------
# Unit 26. 세트 사용하기
# ------------------------------------------------------------------------------------------------------
# 26.1 세트 만들기
# ------------------------------------------------------------------------------------------------------
fruits = {'strawberry', 'grape', 'orange', 'pineapple', 'cherry'}
print(fruits)

fruits = {'orange', 'orange', 'cherry'}
print(fruits)

# print(fruits[0])      # 특정 요소만 출력 불가능

# 26.1.1 세트에 특정 값이 있는지 확인하기
fruits = {'strawberry', 'grape', 'orange', 'pineapple', 'cherry'}
print('orange' in fruits)
print('peach' in fruits)
print('peach' not in fruits)
print('orange' not in fruits)

# 26.1.2 set를 사용하여 세트 만들기
a = set('apple')
print(a)

b = set(range(5))
print(b)

c = set()
print(c, type(c))

d = {}
print(d, type(d))

# 참고) 한글 문자열을 세트로 만들기
print(set("안녕하세요"))

# 참고) 세트 안에 세트 넣기
# a = {{1, 2}, {3, 4}}      # list와 dictionary와 달리 세트 안에 세트를 넣을 수 없음

# 참고) 프로즌 세트
a = frozenset(range(10))
print(a)
print(frozenset({frozenset({1, 2}), frozenset({3, 4})}))

# ------------------------------------------------------------------------------------------------------
# 26.2 집합 연산 사용
# ------------------------------------------------------------------------------------------------------
a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

## 합집합
print(a | b)
print(set.union(a, b))

## 교집합
print(a & b)
print(set.intersection(a, b))

## 차집합
print(a - b)
print(set.difference(a, b))

## 대칭차집합
print(a ^ b)
print(set.symmetric_difference(a, b))

# 26.2.1 집합 연산 후 할당 연산자 사용
## |=와 update 메서드
x = {1, 2, 3, 4}
a |= {5}
print(a)

y = {1, 2, 3, 4}
a.update({5})
print(a)

## &=와 intersection_update 메서드
x = {1, 2, 3, 4}
x &= {0, 1, 2, 3, 4}
print(x)

y = {1, 2, 3, 4}
y.intersection_update({0, 1, 2, 3, 4})
print(y)

## -=와 difference_update 메서드
x = {1, 2, 3, 4}
x -= {3}
print(x)

y = {1, 2, 3, 4}
y.difference_update({3})
print(y)

## ^=와 symmetric_difference_update 메서드
x = {1, 2, 3, 4}
x ^= {3, 4, 5, 6}
print(x)

y = {1, 2, 3, 4}
y.symmetric_difference_update({3, 4, 5, 6})
print(y)

# 26.2.2 부분 집합과 상위집합 확인
## 부분집합
a = {1, 2, 3, 4}
print(f'부분집합 =>', a <= {1, 2, 3, 4})
print(a.issubset({1, 2, 3, 4}))

## 진부분집합
print(f'진부분집합 =>', a < {1, 2, 3, 4, 5})

## 상위집합
print(f'상위집합 =>', a >= {1, 2, 3, 4})
print(a.issuperset({1, 2, 3, 4}))

## 진상위집합
print(f'진상위집합 =>', a > {1, 2, 3})

# 26.2.3 세트가 같은지 다른지 확인하기
a = {1, 2, 3, 4}
print(a == {1, 2, 3, 4})
print(a == {4, 2, 1, 3})        # 세트는 요소의 순서가 정해져 있지 않으므로 == 로 비교했을 때 각 요소만 같으면 참
print(a != {1, 2, 3})

# 26.2.4 세트가 겹치지 않는지 확인(.disjoint)
print(a.isdisjoint({5, 6, 7, 8}))       # 겹치는 요소가 없으면 True
print(a.isdisjoint({3, 4, 5, 6}))       #             있으면 False

# ------------------------------------------------------------------------------------------------------
# 26.3 세트 조작
# ------------------------------------------------------------------------------------------------------
# 26.3.1 세트에 요소 추가
a = {1, 2, 3, 4}
a.add(5)
print(f'요소 추가 : ', a)

# 26.3.2 세트에서 특정 요소 삭제 (remove는 요소가 없으면 ERROR 발생, discard는 그냥 넘어감)
a.remove(3)
print(f'특정 요소 삭제 :', a)

a.discard(2)
print(f'discard 사용 :', a)
a.discard(3)        
print(a)

# 26.3.3 세트에서 임의의 요소 삭제
b = {1, 2, 3, 4}
print(b.pop())
print(f'임의의 요소 삭제 :', b)

# 26.3.4 세트의 모든 요소 삭제
b.clear()
print(f'세트의 모든 요소 삭제 :', b)

# 26.3.5 세트의 요소 개수 구하기
c = {1, 2, 3, 4}
print(f'세트 요소 개수 :', len(c))

# ------------------------------------------------------------------------------------------------------
# 26.4 세트의 할당과 복사
# ------------------------------------------------------------------------------------------------------
x = {1, 2, 3, 4}
y = x
print(x is y)

y.add(5)
print(x, y)

## 세트 a와 b를 완전히 두 개로 만들려면 copy 메서드 사용
x = {9, 10, 11, 12}
y = x.copy()
print(x is b)
print(x == y)

y.add(19)
print(x, y)

# ------------------------------------------------------------------------------------------------------
# 26.5 반복문으로 세트의 요소를 모두 출력
# ------------------------------------------------------------------------------------------------------
z = {7, 8, 1, 5, 0}
for i in z:
    print(i)

# ------------------------------------------------------------------------------------------------------
# 26.6 세트 표현식 사용하기
# ------------------------------------------------------------------------------------------------------
a = {i for i in 'apple'}
print(a)

# 26.6.1 세트 표현식에 if 조건문 사용
b = {i for i in 'pineapple' if i not in 'apl'}
print(b)

# 심사문제 : 공약수 구하기
num1, num2 = map(int, input().split())
a = {i for i in range(1, num1 + 1) if num1 % i == 0}
b = {i for i in range(1, num2 + 1) if num2 % i == 0}

divisor = a & b

if type(divisor) == set:
    result = sum(divisor)

print(result)
